[{"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/index.tsx":"1","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/JoinGroupModal.tsx":"2","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/Status.tsx":"3","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/ParentContainer.tsx":"4","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/GroupPage.tsx":"5","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/ListView.tsx":"6","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/Header.tsx":"7","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/CreateGroupModal.tsx":"8","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/PopModal.tsx":"9","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/StatusContainer.tsx":"10","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/PopButton.tsx":"11"},{"size":975,"mtime":1610186024114,"results":"12","hashOfConfig":"13"},{"size":2535,"mtime":1610187579903,"results":"14","hashOfConfig":"13"},{"size":512,"mtime":1610139623394,"results":"15","hashOfConfig":"13"},{"size":2403,"mtime":1610324617532,"results":"16","hashOfConfig":"13"},{"size":1591,"mtime":1610188051513,"results":"17","hashOfConfig":"13"},{"size":1014,"mtime":1610183786849,"results":"18","hashOfConfig":"13"},{"size":515,"mtime":1610139623391,"results":"19","hashOfConfig":"13"},{"size":2579,"mtime":1610187832924,"results":"20","hashOfConfig":"13"},{"size":2448,"mtime":1610326396871,"results":"21","hashOfConfig":"13"},{"size":461,"mtime":1610327525675,"results":"22","hashOfConfig":"13"},{"size":714,"mtime":1610327561681,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1civyqt",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/index.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/JoinGroupModal.tsx",["49","50"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  Modal,\n  ModalHeader,\n  ModalContent,\n  ModalBody,\n  ModalFooter,\n  ModalOverlay,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Button,\n  Input,\n  useToast\n  \n} from '@chakra-ui/react';\nimport axios from 'axios';\n\ntype ModalProps = {\n  open: boolean;\n  closeModal: () => void;\n};\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst joinGroup = async (id: string): Promise<any> => {\n  try {\n    const resp = await axios.get('/bubble/join/' + id)\n    return resp.data;\n  }catch (e: any){\n    if(e.response){\n      throw new Error(e.response.data.message);\n    }else{\n      throw new Error('Cannot add to group!');\n    }\n  }\n\n}\n\n\nconst JoinGroupModal: React.FC<ModalProps> = (props: ModalProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [code, setCode] = useState<string>(\"\");\n  const toast = useToast();\n\n  const history = useHistory();\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setLoading(true);\n    try {\n      await delay(500);\n\n      await joinGroup(code);\n\n      props.closeModal();\n      toast({\n        title: 'Joined!',\n        description: 'You have joined the group!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      \n\n    } catch (e) {\n      console.log(e);\n      toast({\n        title: 'Group does not exist!',\n        description: String(e),\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n    history.push(\"/\");\n    setLoading(false);\n  };\n\n  const onCodeChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setCode(event.currentTarget.value);\n  }\n\n\n  return (\n    <Modal isOpen={props.open} onClose={props.closeModal}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Group Code:</ModalHeader>\n        <ModalCloseButton />\n          <form onSubmit={handleSubmit}>\n          <ModalBody>\n            <FormControl>\n              <FormLabel>Type your 5-digit group code:</FormLabel>\n              <Input onChange={onCodeChange} placeholder=\"XXXXX\" />\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button type=\"submit\" isLoading={loading}>Join</Button>\n            <Button onClick={props.closeModal}>Cancel</Button>\n          </ModalFooter>\n          </form>\n        \n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default JoinGroupModal;\n","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/Status.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/ParentContainer.tsx",["51","52","53","54"],"import React, { useEffect, useState } from 'react';\nimport StatusContainer from './StatusContainer';\nimport ListView from './ListView';\nimport { Box } from '@chakra-ui/react';\nimport axios from 'axios';\nimport {useHistory} from 'react-router-dom'\n\nexport type Test = {\n  date: Date;\n  status: string;\n};\n\nexport type User = {\n  name: string;\n  lastTest: Test;\n};\n\nexport type Profile = {\n  name: string;\n  bubbleCode: string;\n  test: Test;\n\n}\n\nconst getUsers = async (): Promise<any> => {\n  try {\n    const users = await axios.get('/bubble');\n    \n    return users.data;\n  }catch (e: any){\n    if (e.response) {\n      throw new Error(e.response.data.message);\n\n    } else {\n      throw new Error('NAH NO USERS FAM');\n    }\n\n  }\n\n};\n\nconst getCurrUser = async(): Promise<any> => {\n  try{\n    const currProfile = await axios.get('/user');\n    return currProfile.data;\n\n  }catch(e: any){\n    if(e.response){\n      throw new Error(e.response.data.message);\n    }else{\n      throw new Error(\"YOU DONT EXIST\")\n    }\n  }\n}\n\nconst ParentContainer: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [profile, setProfile] = useState<Profile>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const history = useHistory()\n\n\n  useEffect(() => {\n    const fetchUsers = async () => { \n      const fetchedUsers = await getUsers();\n      console.log(\"TEST\", fetchedUsers);\n      setUsers(fetchedUsers);\n    \n    };\n\n    const fetchProfile = async () => {\n      const fetchedProfile = await getCurrUser();\n      if(!fetchedProfile.bubbleCode){\n        return false;\n      }\n      setProfile(fetchedProfile)\n      return true;\n    };\n\n    const fetchAllData = async () => {\n      \n\n      const profile = await fetchProfile();\n      if(!profile){\n        history.push('/join')\n      }else{\n        await fetchUsers();\n      }\n      setLoading(false);\n\n    }\n    fetchAllData();\n  }, []);\n\n  console.log(users)\n\n  return (\n    (!loading)\n      ? \n      <>\n      <Box minH=\"100%\">\n      {console.log(users)}\n\n        <StatusContainer />\n        <ListView users={users} bubbleCode={profile ? profile.bubbleCode : \"NA\" }/>\n       \n      </Box>\n    </> :\n    <>\n    <StatusContainer />  \n        <Box\n            paddingLeft=\"1.5rem\"\n            fontWeight=\"300\"\n        >\n            Currently loading data...\n        </Box>\n\n    </>\n  \n\n\n    \n \n  );\n};\n\nexport default ParentContainer;\n","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/GroupPage.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/ListView.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/Header.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/CreateGroupModal.tsx",["55","56"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  Modal,\n  ModalHeader,\n  ModalContent,\n  ModalBody,\n  ModalFooter,\n  ModalOverlay,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Button,\n  Input,\n  useToast\n  \n} from '@chakra-ui/react';\nimport axios from 'axios';\n\ntype ModalProps = {\n  open: boolean;\n  closeModal: () => void;\n};\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst createGroup = async (bubbleName: string): Promise<any> => {\n  try {\n    const resp = await axios.post('/bubble/create', {name: bubbleName})\n    return resp.data;\n  }catch (e: any){\n    if(e.response){\n      throw new Error(e.response.data.message);\n    }else{\n      throw new Error('Cannot add to group!');\n    }\n  }\n\n}\n\n\nconst JoinGroupModal: React.FC<ModalProps> = (props: ModalProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [name, setName] = useState<string>(\"\");\n  const toast = useToast();\n\n  const history = useHistory();\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setLoading(true);\n    try {\n      await delay(500);\n\n      await createGroup(name);\n\n      props.closeModal();\n      toast({\n        title: 'Joined!',\n        description: 'You have joined the group!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      \n\n    } catch (e) {\n      console.log(e);\n      toast({\n        title: 'Group does not exist!',\n        description: String(e),\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n    history.push(\"/\");\n    setLoading(false);\n  };\n\n  const onNameChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  }\n\n\n  return (\n    <Modal isOpen={props.open} onClose={props.closeModal}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Group Name:</ModalHeader>\n        <ModalCloseButton />\n          <form onSubmit={handleSubmit}>\n          <ModalBody>\n            <FormControl>\n              <FormLabel>Type your group name:</FormLabel>\n              <Input onChange={onNameChange} placeholder=\"i.e. Beyblades: Let it rip\" />\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button type=\"submit\" isLoading={loading}>Create</Button>\n            <Button onClick={props.closeModal}>Cancel</Button>\n          </ModalFooter>\n          </form>\n        \n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default JoinGroupModal;\n","/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/PopModal.tsx",["57","58"],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/StatusContainer.tsx",[],"/Users/rithik/Documents/GT/spring2021/bubbles-app/client/src/components/PopButton.tsx",[],{"ruleId":"59","severity":1,"message":"60","line":30,"column":47,"nodeType":"61","messageId":"62","endLine":30,"endColumn":50,"suggestions":"63"},{"ruleId":"59","severity":1,"message":"60","line":34,"column":14,"nodeType":"61","messageId":"62","endLine":34,"endColumn":17,"suggestions":"64"},{"ruleId":"59","severity":1,"message":"60","line":25,"column":36,"nodeType":"61","messageId":"62","endLine":25,"endColumn":39,"suggestions":"65"},{"ruleId":"59","severity":1,"message":"60","line":30,"column":14,"nodeType":"61","messageId":"62","endLine":30,"endColumn":17,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"60","line":42,"column":38,"nodeType":"61","messageId":"62","endLine":42,"endColumn":41,"suggestions":"67"},{"ruleId":"59","severity":1,"message":"60","line":47,"column":13,"nodeType":"61","messageId":"62","endLine":47,"endColumn":16,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"60","line":30,"column":57,"nodeType":"61","messageId":"62","endLine":30,"endColumn":60,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"60","line":34,"column":14,"nodeType":"61","messageId":"62","endLine":34,"endColumn":17,"suggestions":"70"},{"ruleId":"59","severity":1,"message":"60","line":16,"column":41,"nodeType":"61","messageId":"62","endLine":16,"endColumn":44,"suggestions":"71"},{"ruleId":"59","severity":1,"message":"60","line":22,"column":16,"nodeType":"61","messageId":"62","endLine":22,"endColumn":19,"suggestions":"72"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["73","74"],["75","76"],["77","78"],["79","80"],["81","82"],["83","84"],["85","86"],["87","88"],["89","90"],["91","92"],{"messageId":"93","fix":"94","desc":"95"},{"messageId":"96","fix":"97","desc":"98"},{"messageId":"93","fix":"99","desc":"95"},{"messageId":"96","fix":"100","desc":"98"},{"messageId":"93","fix":"101","desc":"95"},{"messageId":"96","fix":"102","desc":"98"},{"messageId":"93","fix":"103","desc":"95"},{"messageId":"96","fix":"104","desc":"98"},{"messageId":"93","fix":"105","desc":"95"},{"messageId":"96","fix":"106","desc":"98"},{"messageId":"93","fix":"107","desc":"95"},{"messageId":"96","fix":"108","desc":"98"},{"messageId":"93","fix":"109","desc":"95"},{"messageId":"96","fix":"110","desc":"98"},{"messageId":"93","fix":"111","desc":"95"},{"messageId":"96","fix":"112","desc":"98"},{"messageId":"93","fix":"113","desc":"95"},{"messageId":"96","fix":"114","desc":"98"},{"messageId":"93","fix":"115","desc":"95"},{"messageId":"96","fix":"116","desc":"98"},"suggestUnknown",{"range":"117","text":"118"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"117","text":"119"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"120","text":"118"},{"range":"120","text":"119"},{"range":"121","text":"118"},{"range":"121","text":"119"},{"range":"122","text":"118"},{"range":"122","text":"119"},{"range":"123","text":"118"},{"range":"123","text":"119"},{"range":"124","text":"118"},{"range":"124","text":"119"},{"range":"125","text":"118"},{"range":"125","text":"119"},{"range":"126","text":"118"},{"range":"126","text":"119"},{"range":"127","text":"118"},{"range":"127","text":"119"},{"range":"128","text":"118"},{"range":"128","text":"119"},[523,526],"unknown","never",[631,634],[479,482],[584,587],[770,773],[879,882],[533,536],[658,661],[306,309],[493,496]]